db.Restaurantes.find({}) # 1 mostrar todos los documentos en la colección Restaurantes
db.restaurantes.find({}, {restaurant_id: 1, name: 1, borough: 1, cuisine: 1}) # 2 mostrar el restaurante_id, name, borough y cuisine por todos los doc en la colección Restaurantes
db.restaurantes.find({}, {restaurant_id: 1, name: 1, borough: 1, cuisine: 1, _id: 0}) # 3 mostrar el restaurante_id, name, borough y cuisine, pero excluye el campo _id por todos los documentos en la colección Restaurantes
db.restaurantes.find({}, {restaurant_id: 1, name: 1, borough: 1, "address.zipcode": 1, _id: 0}) # 4 mostrar restaurando_id, name, borough y zip code, pero excluye el campo _id por todos los documentos en la colección Restaurantes
db.restaurantes.find({borough: "Bronx"}) # 5 mostrar todos los restaurantes que están en el Bronx
db.restaurantes.find({borough: "Bronx"}).limit(5) # 6 mostrar los primeros 5 restaurantes que están en el Bronx
db.restaurantes.find({borough: "Bronx"}).skip(5).limit(5) # 7 mostrar el próximo 5 restaurantes después de saltar los primeros 5 del Bronx
db.restaurantes.find({"grades.score": {$gt: 90}}) # 8 encontrar los restaurantes que tienen un score de más de 90
db.restaurantes.find({"grades.score": {$gt: 80, $lt: 100}}) # 9 encontrar los restaurantes que tienen un score de más de 80 pero menos que 100
db.restaurantes.find({"address.coord.0": {$lt: -95.754168}}) # 10 encontrar los restaurantes que se localizan en valor de latitud menos de -95.754168
db.restaurantes.find({cuisine: {$ne: "American"}, "grades.score": {$gt: 70}, "address.coord.0": {$lt: -65.754168}}) # 11 encontrar los restaurantes que no preparan jefe cuisine de 'American' y su calificación es superior en 70 y longitud inferior a -65.754168
db.restaurantes.find({cuisine: {$ne: "American"}, "grades.score": {$gt: 70}, "address.coord.0": {$lt: -65.754168}}) # 12 encontrar los restaurantes que no preparan jefe cuisine de 'American' y consiguieron un marcador más de 70 y localizado en la longitud menos que -65.754168. Nota: Fez esta consulta sin utilizar $and operador
db.restaurantes.find({cuisine: {$ne: "American"}, "grades.grade": "A", borough: {$ne: "Brooklyn"}}).sort({cuisine: -1}) # 13 encontrar los restaurantes que no preparan jefe cuisine de 'American' y obtuvieron un punto de grado 'A' no pertenece a Brooklyn. Se tiene que mostrar el documento según la cuisine en orden descendente
db.restaurantes.find({name: {$regex: /^Wil/}}, {restaurant_id: 1, name: 1, borough: 1, cuisine: 1}) # 14 encontrar el restaurante_id, name, borough y cuisine para aquellos restaurantes que contienen 'Wil' como las tres primeras letras en su nombre
db.restaurantes.find({name: {$regex: /ces$/}}, {restaurant_id: 1, name: 1, borough: 1, cuisine: 1}) # 14 encontrar el restaurante_id, name, borough y cuisine para aquellos restaurantes que contienen 'ces' como las últimas tres letras en su nombre
db.restaurantes.find({borough: {$ne: "Bronx"}}) # 16 encontrar el restaurante_id, name, borough y cuisine para aquellos restaurantes que contienen 'Riego' como tres letras en algún lugar en su nombre
#### 17 Restaurantes que pertenecen al Bronx y prepararon cualquier plato americano o chino
db.restaurants.find({
  $and: [
    { borough: "Bronx" },
    { $or: [
        { cuisine: "American " },
        { cuisine: "Chinese" }
      ]
    }
  ]
});

### 18 restaurante_id, name, borough y cuisine para aquellos restaurantes que pertenecen a Staten Island, Queens, Bronx o Brooklyn
db.restaurants.find({
  $or: [
    { borough: "Staten Island" },
    { borough: "Queens" },
    { borough: "Bronx" },
    { borough: "Brooklyn" }
  ]
}, {
  restaurant_id: 1,
  name: 1,
  borough: 1,
  cuisine: 1
});

### 19 restaurante_id, name, borough y cuisine para aquellos restaurantes que no pertenecen a Staten Island, Queens, Bronx o Brooklyn
db.restaurants.find({
  $nor: [
    { borough: "Staten Island" },
    { borough: "Queens" },
    { borough: "Bronx" },
    { borough: "Brooklyn" }
  ]
}, {
  restaurant_id: 1,
  name: 1,
  borough: 1,
  cuisine: 1
});